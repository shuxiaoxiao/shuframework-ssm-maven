<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

	<!-- 
	<context-param>  
        <param-name>log4jConfigLocation</param-name>
        	 默认在src/main/resources即根目录下（建议），指到其他目录需要用classpath来指引
        <param-value>classpath:config/log4j.properties</param-value>
        	这样配置会到src/main/webapp下
        <param-value>/config/log4j.properties</param-value>
    </context-param> -->
    <!-- Spring的log4j监听器,需要在ContextLoaderListener之前，
	不然报警告：No appenders could be found for logger (org.springframework.web.context.ContextLoader) -->
	<!-- log4j的配置 -->
    <!-- <listener>
      <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener> -->
    
    <!-- log4j2-begin --> 
    <!-- 注意！ 由于使用3.0+版本web.xml log4j2 会自动注册 如果使用2.5版本xml 需要手动注册 以下代码-->
    <!-- <listener>
        <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
    </listener>

    <filter>
        <filter-name>log4jServletFilter</filter-name>
        <filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>log4jServletFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping> -->
    <!-- log4j2-end -->
    
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
    </listener>
    
    <context-param>
        <param-name>contextConfigLocation</param-name>  
        <!--由于没有默认applicationContext.xml文件，需要指定相应文件 -->
        <param-value>classpath:spring/spring.xml</param-value>
    </context-param>
    
    <!-- 防止spring内存溢出监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!--设置编码-->
	<filter>
		<display-name>CharacterEncodingFilter</display-name>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
    
    <!-- 配置  cxf 的核心的过滤器
	<servlet>  
     	<servlet-name>CXFServlet</servlet-name>  
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>  
        <load-on-startup>1</load-on-startup>  
    </servlet>
    <servlet-mapping>  
         <servlet-name>CXFServlet</servlet-name>  
         <url-pattern>/webservice/*</url-pattern>
    </servlet-mapping>  
    -->
    
	<!--配置  springmvc 的核心的过滤器-->
	<servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/spring-mvc.xml</param-value>
		</init-param>
		<!-- <load-on-startup>1</load-on-startup> -->
	</servlet>
	
	<!--servlet的映射，如果有多个需要注意加载顺序 -->
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<!-- url-pattern配置为/，不带文件后缀，会造成其它静态文件(js，css等)不能访问,
		需在spring-mvc.xml中配置。如配为*.do，则不影响静态文件的访问，但正文乱码不好解决  -->
		<url-pattern>/</url-pattern>
		<!-- <url-pattern>*.do</url-pattern> -->
	</servlet-mapping>

<!-- 配置session超时时间，单位分钟 -->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<error-page>
		<error-code>404</error-code>
		<location>/error/404.jsp</location>
	</error-page>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
</web-app>
